// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: go_datacollector_svr.proto

package go_datacollector_svr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoDatacollectorSvrClient is the client API for GoDatacollectorSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoDatacollectorSvrClient interface {
	// 上报链路数据
	ReportTrace(ctx context.Context, in *ReportTraceReq, opts ...grpc.CallOption) (*ReportTraceRsp, error)
}

type goDatacollectorSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewGoDatacollectorSvrClient(cc grpc.ClientConnInterface) GoDatacollectorSvrClient {
	return &goDatacollectorSvrClient{cc}
}

func (c *goDatacollectorSvrClient) ReportTrace(ctx context.Context, in *ReportTraceReq, opts ...grpc.CallOption) (*ReportTraceRsp, error) {
	out := new(ReportTraceRsp)
	err := c.cc.Invoke(ctx, "/go_datacollector_svr.go_datacollector_svr/ReportTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoDatacollectorSvrServer is the server API for GoDatacollectorSvr service.
// All implementations should embed UnimplementedGoDatacollectorSvrServer
// for forward compatibility
type GoDatacollectorSvrServer interface {
	// 上报链路数据
	ReportTrace(context.Context, *ReportTraceReq) (*ReportTraceRsp, error)
}

// UnimplementedGoDatacollectorSvrServer should be embedded to have forward compatible implementations.
type UnimplementedGoDatacollectorSvrServer struct {
}

func (UnimplementedGoDatacollectorSvrServer) ReportTrace(context.Context, *ReportTraceReq) (*ReportTraceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTrace not implemented")
}

// UnsafeGoDatacollectorSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoDatacollectorSvrServer will
// result in compilation errors.
type UnsafeGoDatacollectorSvrServer interface {
	mustEmbedUnimplementedGoDatacollectorSvrServer()
}

func RegisterGoDatacollectorSvrServer(s grpc.ServiceRegistrar, srv GoDatacollectorSvrServer) {
	s.RegisterService(&GoDatacollectorSvr_ServiceDesc, srv)
}

func _GoDatacollectorSvr_ReportTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTraceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoDatacollectorSvrServer).ReportTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_datacollector_svr.go_datacollector_svr/ReportTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoDatacollectorSvrServer).ReportTrace(ctx, req.(*ReportTraceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoDatacollectorSvr_ServiceDesc is the grpc.ServiceDesc for GoDatacollectorSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoDatacollectorSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_datacollector_svr.go_datacollector_svr",
	HandlerType: (*GoDatacollectorSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportTrace",
			Handler:    _GoDatacollectorSvr_ReportTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_datacollector_svr.proto",
}
