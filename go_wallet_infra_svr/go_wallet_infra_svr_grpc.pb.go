// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: go_wallet_infra_svr.proto

package go_wallet_infra_svr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoWalletInfraSvrClient is the client API for GoWalletInfraSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoWalletInfraSvrClient interface {
	// 创建钱包
	CreateWallet(ctx context.Context, in *CreateWalletReq, opts ...grpc.CallOption) (*CreateWalletRsp, error)
	// 导入钱包
	ImportWallet(ctx context.Context, in *ImportWalletReq, opts ...grpc.CallOption) (*ImportWalletRsp, error)
}

type goWalletInfraSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewGoWalletInfraSvrClient(cc grpc.ClientConnInterface) GoWalletInfraSvrClient {
	return &goWalletInfraSvrClient{cc}
}

func (c *goWalletInfraSvrClient) CreateWallet(ctx context.Context, in *CreateWalletReq, opts ...grpc.CallOption) (*CreateWalletRsp, error) {
	out := new(CreateWalletRsp)
	err := c.cc.Invoke(ctx, "/go_wallet_infra_svr.go_wallet_infra_svr/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goWalletInfraSvrClient) ImportWallet(ctx context.Context, in *ImportWalletReq, opts ...grpc.CallOption) (*ImportWalletRsp, error) {
	out := new(ImportWalletRsp)
	err := c.cc.Invoke(ctx, "/go_wallet_infra_svr.go_wallet_infra_svr/ImportWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoWalletInfraSvrServer is the server API for GoWalletInfraSvr service.
// All implementations must embed UnimplementedGoWalletInfraSvrServer
// for forward compatibility
type GoWalletInfraSvrServer interface {
	// 创建钱包
	CreateWallet(context.Context, *CreateWalletReq) (*CreateWalletRsp, error)
	// 导入钱包
	ImportWallet(context.Context, *ImportWalletReq) (*ImportWalletRsp, error)
	mustEmbedUnimplementedGoWalletInfraSvrServer()
}

// UnimplementedGoWalletInfraSvrServer must be embedded to have forward compatible implementations.
type UnimplementedGoWalletInfraSvrServer struct {
}

func (UnimplementedGoWalletInfraSvrServer) CreateWallet(context.Context, *CreateWalletReq) (*CreateWalletRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedGoWalletInfraSvrServer) ImportWallet(context.Context, *ImportWalletReq) (*ImportWalletRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportWallet not implemented")
}
func (UnimplementedGoWalletInfraSvrServer) mustEmbedUnimplementedGoWalletInfraSvrServer() {}

// UnsafeGoWalletInfraSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoWalletInfraSvrServer will
// result in compilation errors.
type UnsafeGoWalletInfraSvrServer interface {
	mustEmbedUnimplementedGoWalletInfraSvrServer()
}

func RegisterGoWalletInfraSvrServer(s grpc.ServiceRegistrar, srv GoWalletInfraSvrServer) {
	s.RegisterService(&GoWalletInfraSvr_ServiceDesc, srv)
}

func _GoWalletInfraSvr_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoWalletInfraSvrServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_wallet_infra_svr.go_wallet_infra_svr/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoWalletInfraSvrServer).CreateWallet(ctx, req.(*CreateWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoWalletInfraSvr_ImportWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoWalletInfraSvrServer).ImportWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_wallet_infra_svr.go_wallet_infra_svr/ImportWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoWalletInfraSvrServer).ImportWallet(ctx, req.(*ImportWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoWalletInfraSvr_ServiceDesc is the grpc.ServiceDesc for GoWalletInfraSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoWalletInfraSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_wallet_infra_svr.go_wallet_infra_svr",
	HandlerType: (*GoWalletInfraSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _GoWalletInfraSvr_CreateWallet_Handler,
		},
		{
			MethodName: "ImportWallet",
			Handler:    _GoWalletInfraSvr_ImportWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_wallet_infra_svr.proto",
}
